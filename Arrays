//26. Remove Duplicates from Sorted Array

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
       int n=nums.size();
       int i=0;
       for(int j=1;j<n;j++){
            if(nums[j]!=nums[i]){
                nums[i+1]=nums[j];
                i++;
            }
       }
       return i+1;
    }
};

//268. Missing Number
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int sum=0;
        int n=nums.size();
        int tsum=0;
        for(int i=0;i<=n;i++){
            tsum+=i;
        }
        for(int i=0;i<n;i++){
            
            sum+=nums[i];
        }
        return tsum-sum;

        
    }
};

// Rotate Array
class Solution {
  public:

    // Function to rotate an array by d elements in counter-clockwise direction.
    void rotateArr(vector<int>& arr, int d) {
        
        int n=arr.size();
        d=d%n;
        reverse(arr.begin(),arr.begin()+d);
        reverse(arr.begin()+d,arr.end());
        reverse(arr.begin(),arr.end());
        
        
    }
};

//283. Move Zeroes


class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int n=nums.size();
        int insertPos=0;
        for(int i=0;i<n;i++){
            if(nums[i]!=0){
                nums[insertPos]=nums[i];
                insertPos++;
            }
        }

        while(insertPos<n){
            nums[insertPos]=0;
            insertPos++;
        }
    }
};

//Union of 2 Sorted Arrays


class Solution {
  public:
    vector<int> findUnion(vector<int> &a, vector<int> &b) {
        // code here
        vector<int>res;
        
        int n1=a.size();
        int n2=b.size();
        int i=0;
        int j=0;
        while(i<n1 && j<n2){
            if(a[i]<=b[j]){
                if(res.size()==0 || res.back()!=a[i]){
                    res.push_back(a[i]);
                }
                i++;
            }
            else{
                if(res.size()==0 || res.back()!=b[j]){
                    res.push_back(b[j]);
                }
                j++;
            }
        }
        while(i<n1){
            if(res.size()==0 || res.back()!=a[i]){
                    res.push_back(a[i]);
                }
            i++;
        }
        while(j<n2){
            if(res.size()==0 || res.back()!=b[j]){
                    res.push_back(b[j]);
                }
            j++;
        }
        
        
        return res;
        
    }
};

//485. Max Consecutive Ones

class Solution {
public:
    int findMaxConsecutiveOnes(vector<int>& nums) {
        int n=nums.size();
        int maxi=0;
        int cnt=0;

        for(int i=0;i<n;i++){
            if(nums[i]==1){
                cnt++;
                maxi=max(maxi,cnt);
            }
            else{
                cnt=0;
            }
        }
        return maxi;
    }

};
